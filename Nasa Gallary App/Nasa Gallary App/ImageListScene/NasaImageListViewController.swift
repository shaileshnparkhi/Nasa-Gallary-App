//
//  NasaImageListViewController.swift
//  Nasa Gallary App
//
//  Created by SHAILESH on 01/09/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Kingfisher

protocol NasaImageListDisplayLogic: class
{
    func didReceiveFetchedImageData(response: [NasaImageList.ImageViewModel]?,message:String,statusCode:Int)
}

class NasaImageListViewController: UIViewController
{
    
  @IBOutlet weak var collectionView:UICollectionView?
    
  var interactor: NasaImageListBusinessLogic?
  var router: (NSObjectProtocol & NasaImageListRoutingLogic & NasaImageListDataPassing)?
    
    var imageArray:[NasaImageList.ImageViewModel]?{
        didSet{
            self.collectionView?.reloadData()
        }
    }
  
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
    
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = NasaImageListInteractor()
    let presenter = NasaImageListPresenter()
    let router = NasaImageListRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
          
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    fetchImageData()
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func fetchImageData()
  {
    
      interactor?.fetchImageData()
  }
  
 
}

extension NasaImageListViewController:UICollectionViewDelegate,UICollectionViewDataSource,UICollectionViewDelegateFlowLayout{
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return imageArray?.count ?? 0
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "NasaImageListCollectionViewCell", for: indexPath) as? NasaImageListCollectionViewCell
        
        if cell != nil{
            
            if let urlString = imageArray?[indexPath.row].hdurl,urlString.count > 0 {
                let url = URL(string: urlString)
                //         self.kf.indicatorType = .activity
                cell?.imageView.kf.setImage(with: url, placeholder: UIImage(named: "placeholder"), options: [
                    .scaleFactor(UIScreen.main.scale),
                    .transition(.fade(1)),
                    .cacheOriginalImage
                ], progressBlock: nil)
    
            } else {
                cell?.imageView.image = UIImage(named: "placeholder")
            }
            return cell!
        }
        
       return UICollectionViewCell()
    }
    
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: (collectionView.frame.width-20)/3, height: (collectionView.frame.width-20)/3)
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        self.performSegue(withIdentifier: "showDetailsSegue", sender: self)
    }
}

extension NasaImageListViewController:NasaImageListDisplayLogic{
    func didReceiveFetchedImageData(response: [NasaImageList.ImageViewModel]?,message:String,statusCode:Int){
        if let responseData = response as? [NasaImageList.ImageViewModel],responseData.count > 0{
            self.imageArray = responseData
        }else{
            
        }
    }
}
